import java.util.*;
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        return ksum(nums,4,0,target);

    }
    public List<List<Integer>> ksum(int[]nums,int k,int start,int target){
        List<List<Integer>> ans = new ArrayList<>();
        if (k==2){
            int left = start;
            int right = nums.length-1;
            while(left<right){
                if(nums[left]+nums[right]==target){
                    //ans.add(Arrays.asList(nums[left],nums[right]));
                    List<Integer>path = new ArrayList<>();
                    path.add(nums[left]);
                    path.add(nums[right]);
                    ans.add(path);
                    while(left<right&&nums[left]==nums[left+1]) {left++;}
                    while(left<right&&nums[right]==nums[right-1]) {right--;}
                    left++;
                    right--;
                }
                else if (nums[left]+nums[right]<target) left++;
                else if (nums[left]+nums[right]>target) right--;

            }
        }
        else {
            for(int i=start;i<nums.length-k+1;i++){
                if (i>start&&nums[i]==nums[i-1])continue;
                List<List<Integer>>p = ksum(nums,k-1,i+1,target-nums[i]);
                for(List<Integer>q : p){
                    q.add(0,nums[i]);
                    ans.add(q);
                }
            }
        }
        return ans;

    }

    public static void main(String[] args) {
        Solution a = new Solution();
            System.out.println( a.fourSum(new int[]{1, 0, -1, 0, -2, 2},0));
            // System.out.println(a.wallsAndGates());
    }
} 
